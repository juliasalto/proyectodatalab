# -*- coding: utf-8 -*-
"""EDA_test_hipotesis_datalab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OzeVpeDJqh109X50JEzqJwOPCkvvMemm

# EDA

En esta etapa del proyecto se desarrolla todo el análisis exploratorio de las variables numéricas del conjunto de datos.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from google.colab import files
from google.colab import auth
from google.cloud import bigquery

auth.authenticate_user()

project_id = 'saltoproyecto3'
client = bigquery.Client(project=project_id)

query = """
SELECT *
FROM `saltoproyecto4.datalab.inner_join`
"""

query_job = client.query(query)

df = query_job.to_dataframe()

df.head()

df.info()

df["rating_count"] = df["rating_count"].astype(float)
df["discount_percentage"] = df["discount_percentage"].astype(float)

fig = px.box(df, x= "category_main", y="discounted_price", points="all")
fig.show()

fig = px.box(df, y="discounted_price", points="all")
fig.show()

fig = px.box(df, x= "category_main", y="actual_price", points="all")
fig.show()

fig = px.box(df, y="actual_price", points="all")
fig.show()

fig = px.box(df, x= "category_main", y="discount_percentage", points="all")
fig.show()

fig = px.box(df, y="discount_percentage", points="all")
fig.show()

fig = px.box(df, x= "category_main", y="rating", points="all")
fig.show()

fig = px.box(df, y="rating", points="all")
fig.show()

fig = px.box(df, x= "category_main", y="rating_count", points="all")
fig.show()

fig = px.box(df, y="rating_count", points="all")
fig.show()

fig = px.box(df, x= "rating_group", y="discounted_price", points="all")
fig.show()

fig = px.box(df, x= "rating_group", y="actual_price", points="all")
fig.show()

fig = px.box(df, x= "rating_group", y="discount_percentage", points="all")
fig.show()
#medias parecidas

sns.set_style("darkgrid")

numerical_columns = df.select_dtypes(include=["int64", "float64"]).columns

plt.figure(figsize=(14, len(numerical_columns) * 3))
for idx, feature in enumerate(numerical_columns, 1):
    plt.subplot(len(numerical_columns), 2, idx)
    sns.histplot(df[feature], kde=True)
    plt.title(f"{feature} | Skewness: {round(df[feature].skew(), 2)}")

plt.tight_layout()
plt.show()

numeric_df = df.select_dtypes(include=['number'])
corr_matrix = numeric_df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', vmin=-1, vmax=1, center=0)
plt.title('Matriz de Correlación de Variables Numéricas')
plt.show()

fig = px.scatter(df, x="discounted_price", y="rating", trendline="ols")
fig.show()

fig = px.scatter(df, x="actual_price", y="rating", trendline="ols")
fig.show()

fig = px.scatter(df, x="rating_count", y="actual_price", trendline="ols")
fig.show()

"""# Test de hipótesis

En este hito del proyecto me planteo tres hipótesis que busco aceptar o rechazar. Las mismas son:


*   A mayor número de valoraciones de un producto, éste obtiene mejor calificación
*   A mayor porcentaje de descuento en su precio de venta, éste obtiene mejor calificación
* A mayor porcentaje de descuento en su precio
"""

import statsmodels.api as sm
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from scipy.stats import  mannwhitneyu, shapiro

# Almacenar rating y rating_count en listas por categoría
rating_alto_rating_count = df[df['cat_rating_count'] == 'alto']['rating'].tolist()
rating_bajo_rating_count = df[df['cat_rating_count'] == 'bajo']['rating'].tolist()
rating_alto_discount_percentage = df[df['cat_discount_percentage'] == 'alto']['rating'].tolist()
rating_bajo_discount_peercentage = df[df['cat_discount_percentage'] == 'bajo']['rating'].tolist()
rating_count_alto_discount_percentage = df[df['cat_discount_percentage'] == 'alto']['rating_count'].tolist()
rating_count_bajo_discount_percentage = df[df['cat_discount_percentage'] == 'bajo']['rating_count'].tolist()

alpha = 0.05

# Test de Mann-Whitney U
# Más valoraciones mejor rating
statistic_mannwhitneyu, p_value_mannwhitneyu = mannwhitneyu(rating_alto_rating_count, rating_bajo_rating_count, alternative='two-sided')
print("Test de Mann-Whitney U para rating_count vs rating")
print("Estadística U:", statistic_mannwhitneyu)
print("Valor p:", p_value_mannwhitneyu)
print()
# Interpretación de los resultados
print("\nInterpretación del Test de Mann-Whitney U:")
if p_value_mannwhitneyu < alpha:
    print("Se rechaza la hipótesis nula: Existe una diferencia significativa entre las categorías 'alto' y 'bajo'")
else:
    print("No se puede rechazar la hipótesis nula: No hay una diferencia significativa entre las categorías 'alto' y 'bajo'")

# Test de Mann-Whitney U
# Más porcentaje de descuento, mejor rating
statistic_mannwhitneyu, p_value_mannwhitneyu = mannwhitneyu(rating_alto_discount_percentage, rating_bajo_discount_peercentage, alternative='two-sided')
print("Test de Mann-Whitney U para discount_percentage vs rating")
print("Estadística U:", statistic_mannwhitneyu)
print("Valor p:", p_value_mannwhitneyu)
print()

# Interpretación de los resultados
print("\nInterpretación del Test de Mann-Whitney U:")
if p_value_mannwhitneyu < alpha:
    print("Se rechaza la hipótesis nula: Existe una diferencia significativa entre las categorías 'alto' y 'bajo'")
else:
    print("No se puede rechazar la hipótesis nula: No hay una diferencia significativa entre las categorías 'alto' y 'bajo'")

# Test de Mann-Whitney U
# Más descuento, más valoraciones
statistic_mannwhitneyu, p_value_mannwhitneyu = mannwhitneyu(rating_count_alto_discount_percentage, rating_count_bajo_discount_percentage, alternative='two-sided')
print("Test de Mann-Whitney U para discount_percentage vs rating_count")
print("Estadística U:", statistic_mannwhitneyu)
print("Valor p:", p_value_mannwhitneyu)
print()


# Interpretación de los resultados
print("\nInterpretación del Test de Mann-Whitney U:")
if p_value_mannwhitneyu < alpha:
    print("Se rechaza la hipótesis nula: Existe una diferencia significativa entre las categorías 'alto' y 'bajo'")
else:
    print("No se puede rechazar la hipótesis nula: No hay una diferencia significativa entre las categorías 'alto' y 'bajo'")

"""Rgresión lineal para discount_percentage y rating"""

# Supongamos que tienes un DataFrame llamado df
X = df['discount_percentage']
y = df['rating']

X = sm.add_constant(X)  # Esto agrega la constante (intercepto)
model = sm.OLS(y, X).fit()
print(model.summary())

predictions = model.predict(X)
mse = mean_squared_error(y, predictions)
print(f'Error Cuadrático Medio (MSE): {mse}')

plt.scatter(df['discount_percentage'], df['rating'], color='blue', label='Datos reales')
plt.plot(df['discount_percentage'], predictions, color='red', label='Ajuste del modelo')
plt.xlabel('Discount Percentage')
plt.ylabel('Rating')
plt.legend()
plt.show()

"""Regresión lineal múltiple para todas las variables que "afectan" al rating (discount_percentage, actual_price, discounted_price, raing_count)"""

X = df[['discount_percentage', 'actual_price', 'discounted_price','rating_count']]
y = df['rating']

X = sm.add_constant(X)  # Esto agrega la constante (intercepto)
model = sm.OLS(y, X).fit()
print(model.summary())

predictions = model.predict(X)
mse = mean_squared_error(y, predictions)
print(f'Error Cuadrático Medio (MSE): {mse}')

# Dividir los datos en conjunto de entrenamiento y conjunto de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo de regresión lineal múltiple
reg = LinearRegression().fit(X_train, y_train)

# Hacer predicciones sobre el conjunto de prueba
y_pred = reg.predict(X_test)

# Calcular el error cuadrático medio
mse = mean_squared_error(y_test, y_pred)
print("Error cuadrático medio:", mse)

# Imprimir los coeficientes y el sesgo - Valores de los pesos del modelo de regresión
print("Coeficientes:", reg.coef_)
print("Sesgo (Coeficiente W0:", reg.intercept_)
print("Coeficiente W1:", reg.coef_[0])
print("Coeficiente W2:", reg.coef_[1])

# Imprimir el coeficientes de determinación
print("Coeficiente de determinación:", reg.score(X_train, y_train))